// -*- c++ -*-
//=============================================================================
// Copyright (C) 2011 by Denys Duchier
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//=============================================================================

static YAP_Term gecode_RM_NONE;
static YAP_Term gecode_RM_CONSTANT;
static YAP_Term gecode_RM_LINEAR;
static YAP_Term gecode_RM_LUBY;
static YAP_Term gecode_RM_GEOMETRIC;

static RestartMode gecode_RestartMode_from_term(YAP_Term X)
{
  if (X==gecode_RM_NONE) return RM_NONE;
  if (X==gecode_RM_CONSTANT) return RM_CONSTANT;
  if (X==gecode_RM_LINEAR) return RM_LINEAR;
  if (X==gecode_RM_LUBY) return RM_LUBY;
  if (X==gecode_RM_GEOMETRIC) return RM_GEOMETRIC;
  cerr << "this should never happen [RestartMode]" << endl; exit(1);
}

static YAP_Term gecode_FRT_EQ;
static YAP_Term gecode_FRT_NQ;
static YAP_Term gecode_FRT_LQ;
static YAP_Term gecode_FRT_LE;
static YAP_Term gecode_FRT_GQ;
static YAP_Term gecode_FRT_GR;

static FloatRelType gecode_FloatRelType_from_term(YAP_Term X)
{
  if (X==gecode_FRT_EQ) return FRT_EQ;
  if (X==gecode_FRT_NQ) return FRT_NQ;
  if (X==gecode_FRT_LQ) return FRT_LQ;
  if (X==gecode_FRT_LE) return FRT_LE;
  if (X==gecode_FRT_GQ) return FRT_GQ;
  if (X==gecode_FRT_GR) return FRT_GR;
  cerr << "this should never happen [FloatRelType]" << endl; exit(1);
}

static YAP_Term gecode_RM_EQV;
static YAP_Term gecode_RM_IMP;
static YAP_Term gecode_RM_PMI;

static ReifyMode gecode_ReifyMode_from_term(YAP_Term X)
{
  if (X==gecode_RM_EQV) return RM_EQV;
  if (X==gecode_RM_IMP) return RM_IMP;
  if (X==gecode_RM_PMI) return RM_PMI;
  cerr << "this should never happen [ReifyMode]" << endl; exit(1);
}

static YAP_Term gecode_IRT_EQ;
static YAP_Term gecode_IRT_NQ;
static YAP_Term gecode_IRT_LQ;
static YAP_Term gecode_IRT_LE;
static YAP_Term gecode_IRT_GQ;
static YAP_Term gecode_IRT_GR;

static IntRelType gecode_IntRelType_from_term(YAP_Term X)
{
  if (X==gecode_IRT_EQ) return IRT_EQ;
  if (X==gecode_IRT_NQ) return IRT_NQ;
  if (X==gecode_IRT_LQ) return IRT_LQ;
  if (X==gecode_IRT_LE) return IRT_LE;
  if (X==gecode_IRT_GQ) return IRT_GQ;
  if (X==gecode_IRT_GR) return IRT_GR;
  cerr << "this should never happen [IntRelType]" << endl; exit(1);
}

static YAP_Term gecode_BOT_AND;
static YAP_Term gecode_BOT_OR;
static YAP_Term gecode_BOT_IMP;
static YAP_Term gecode_BOT_EQV;
static YAP_Term gecode_BOT_XOR;

static BoolOpType gecode_BoolOpType_from_term(YAP_Term X)
{
  if (X==gecode_BOT_AND) return BOT_AND;
  if (X==gecode_BOT_OR) return BOT_OR;
  if (X==gecode_BOT_IMP) return BOT_IMP;
  if (X==gecode_BOT_EQV) return BOT_EQV;
  if (X==gecode_BOT_XOR) return BOT_XOR;
  cerr << "this should never happen [BoolOpType]" << endl; exit(1);
}

static YAP_Term gecode_IPL_DEF;
static YAP_Term gecode_IPL_VAL;
static YAP_Term gecode_IPL_BND;
static YAP_Term gecode_IPL_DOM;
static YAP_Term gecode_IPL_SPEED;
static YAP_Term gecode_IPL_MEMORY;
static YAP_Term gecode_IPL_BASIC;
static YAP_Term gecode_IPL_ADVANCED;
static YAP_Term gecode_IPL_BASIC_ADVANCED;

static IntPropLevel gecode_IntPropLevel_from_term(YAP_Term X)
{
  if (X==gecode_IPL_DEF) return IPL_DEF;
  if (X==gecode_IPL_VAL) return IPL_VAL;
  if (X==gecode_IPL_BND) return IPL_BND;
  if (X==gecode_IPL_DOM) return IPL_DOM;
  if (X==gecode_IPL_SPEED) return IPL_SPEED;
  if (X==gecode_IPL_MEMORY) return IPL_MEMORY;
  if (X==gecode_IPL_BASIC) return IPL_BASIC;
  if (X==gecode_IPL_ADVANCED) return IPL_ADVANCED;
  if (X==gecode_IPL_BASIC_ADVANCED) return IPL_BASIC_ADVANCED;
  cerr << "this should never happen [IntPropLevel]" << endl; exit(1);
}

static YAP_Term gecode_TT_FIXP;
static YAP_Term gecode_TT_FIXS;
static YAP_Term gecode_TT_FIXE;

static TaskType gecode_TaskType_from_term(YAP_Term X)
{
  if (X==gecode_TT_FIXP) return TT_FIXP;
  if (X==gecode_TT_FIXS) return TT_FIXS;
  if (X==gecode_TT_FIXE) return TT_FIXE;
  cerr << "this should never happen [TaskType]" << endl; exit(1);
}

static YAP_Term gecode_TE_INIT;
static YAP_Term gecode_TE_PRUNE;
static YAP_Term gecode_TE_FIX;
static YAP_Term gecode_TE_FAIL;
static YAP_Term gecode_TE_DONE;
static YAP_Term gecode_TE_PROPAGATE;
static YAP_Term gecode_TE_COMMIT;

static TraceEvent gecode_TraceEvent_from_term(YAP_Term X)
{
  if (X==gecode_TE_INIT) return TE_INIT;
  if (X==gecode_TE_PRUNE) return TE_PRUNE;
  if (X==gecode_TE_FIX) return TE_FIX;
  if (X==gecode_TE_FAIL) return TE_FAIL;
  if (X==gecode_TE_DONE) return TE_DONE;
  if (X==gecode_TE_PROPAGATE) return TE_PROPAGATE;
  if (X==gecode_TE_COMMIT) return TE_COMMIT;
  cerr << "this should never happen [TraceEvent]" << endl; exit(1);
}

static YAP_Term gecode_SRT_EQ;
static YAP_Term gecode_SRT_NQ;
static YAP_Term gecode_SRT_SUB;
static YAP_Term gecode_SRT_SUP;
static YAP_Term gecode_SRT_DISJ;
static YAP_Term gecode_SRT_CMPL;
static YAP_Term gecode_SRT_LQ;
static YAP_Term gecode_SRT_LE;
static YAP_Term gecode_SRT_GQ;
static YAP_Term gecode_SRT_GR;

static SetRelType gecode_SetRelType_from_term(YAP_Term X)
{
  if (X==gecode_SRT_EQ) return SRT_EQ;
  if (X==gecode_SRT_NQ) return SRT_NQ;
  if (X==gecode_SRT_SUB) return SRT_SUB;
  if (X==gecode_SRT_SUP) return SRT_SUP;
  if (X==gecode_SRT_DISJ) return SRT_DISJ;
  if (X==gecode_SRT_CMPL) return SRT_CMPL;
  if (X==gecode_SRT_LQ) return SRT_LQ;
  if (X==gecode_SRT_LE) return SRT_LE;
  if (X==gecode_SRT_GQ) return SRT_GQ;
  if (X==gecode_SRT_GR) return SRT_GR;
  cerr << "this should never happen [SetRelType]" << endl; exit(1);
}

static YAP_Term gecode_SOT_UNION;
static YAP_Term gecode_SOT_DUNION;
static YAP_Term gecode_SOT_INTER;
static YAP_Term gecode_SOT_MINUS;

static SetOpType gecode_SetOpType_from_term(YAP_Term X)
{
  if (X==gecode_SOT_UNION) return SOT_UNION;
  if (X==gecode_SOT_DUNION) return SOT_DUNION;
  if (X==gecode_SOT_INTER) return SOT_INTER;
  if (X==gecode_SOT_MINUS) return SOT_MINUS;
  cerr << "this should never happen [SetOpType]" << endl; exit(1);
}

static YAP_Bool gecode_constraint_min_336(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  min(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_326(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  member(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_330(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  member(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_410(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_406(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_390(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_388(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_398(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_394(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmin_17(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  bool X5 = gecode_bool_from_term(YAP_ARG5);
  argmin(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmin_15(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  argmin(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_471(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  TaskTypeArgs X2 = gecode_TaskTypeArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  BoolVarArgs X5 = gecode_BoolVarArgs_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  unary(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_467(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  BoolVarArgs X5 = gecode_BoolVarArgs_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  unary(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_375(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  path(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_364(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  path(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_352(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  BoolVarArgs X8 = gecode_BoolVarArgs_from_term(space,YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  nooverlap(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_mult_342(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  mult(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_mult_343(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  mult(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_287(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_283(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_319(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_315(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_291(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVar X5 = gecode_FloatVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_289(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVal X5 = gecode_FloatVal_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_301(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_302(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_297(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_298(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_309(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_310(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_305(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_306(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  linear(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_278(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  ite(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_275(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  ite(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_327(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  member(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_328(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  member(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_331(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  member(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_332(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  member(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_pow_376(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  pow(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_pow_377(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  pow(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_mod_341(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  mod(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_106(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  circuit(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_105(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  circuit(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_108(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  circuit(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_max_324(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  max(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_max_323(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  max(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_258(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  BoolVar X7 = gecode_BoolVar_from_term(space,YAP_ARG7);
  element(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_264(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  element(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_252(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  element(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_250(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  BoolVar X7 = gecode_BoolVar_from_term(space,YAP_ARG7);
  element(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_141(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_122(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_120(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_144(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_142(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_130(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_128(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_133(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_137(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSetArgs X3 = gecode_IntSetArgs_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_126(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_124(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  count(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_381(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  precede(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_380(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  precede(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_107(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  circuit(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_110(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  circuit(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_109(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  circuit(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_103(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  channel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_158(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  cumulative(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_146(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  cumulative(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_54(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  BoolBranchFilter X6 = gecode_BoolBranchFilter_from_term(YAP_ARG6);
  BoolVarValPrint X7 = gecode_BoolVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_60(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TieBreak<BoolVarBranch> X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  BoolBranchFilter X6 = gecode_BoolBranchFilter_from_term(YAP_ARG6);
  BoolVarValPrint X7 = gecode_BoolVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_78(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TieBreak<IntVarBranch> X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  IntBranchFilter X6 = gecode_IntBranchFilter_from_term(YAP_ARG6);
  IntVarValPrint X7 = gecode_IntVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_72(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  IntBranchFilter X6 = gecode_IntBranchFilter_from_term(YAP_ARG6);
  IntVarValPrint X7 = gecode_IntVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_84(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  SetBranchFilter X6 = gecode_SetBranchFilter_from_term(YAP_ARG6);
  SetVarValPrint X7 = gecode_SetVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_90(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  TieBreak<SetVarBranch> X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  SetBranchFilter X6 = gecode_SetBranchFilter_from_term(YAP_ARG6);
  SetVarValPrint X7 = gecode_SetVarValPrint_from_term(YAP_ARG7);
  branch(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_169(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  cumulative(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_165(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  cumulative(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_157(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  cumulative(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_153(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  cumulative(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_259(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  BoolVar X7 = gecode_BoolVar_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  element(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_265(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  element(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_253(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  element(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_251(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  BoolVar X7 = gecode_BoolVar_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  element(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmin_18(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  bool X5 = gecode_bool_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  argmin(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_359(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  nvalues(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_357(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  nvalues(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_363(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  nvalues(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_361(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  nvalues(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_379(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  precede(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_97(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  channel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_100(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  channel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_96(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  channel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_95(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  channel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_93(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  channel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_1(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  std::function<void(Space&home)> X2 = gecode_std_function_from_term(YAP_ARG2);
  branch(*space,X2);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_119(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  clause(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_117(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  clause(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_sqr_456(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  sqr(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmax_11(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  bool X5 = gecode_bool_from_term(YAP_ARG5);
  argmax(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmax_9(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  argmax(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_468(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  TaskTypeArgs X2 = gecode_TaskTypeArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  unary(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_464(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  unary(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_461(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  unary(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_462(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  unary(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_367(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  path(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_370(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  IntVar X8 = gecode_IntVar_from_term(space,YAP_ARG8);
  path(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_369(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  path(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_divmod_197(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  divmod(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_421(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  rel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_fix(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetOpType X3 = gecode_SetOpType_from_term(YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  SetRelType X5 = gecode_SetRelType_from_term(YAP_ARG5);
  SetVar X6 = gecode_SetVar_from_term(space,YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_fix2(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetOpType X3 = gecode_SetOpType_from_term(YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  SetRelType X5 = gecode_SetRelType_from_term(YAP_ARG5);
  IntSet X6 = gecode_IntSet_from_term(YAP_ARG6);
  rel(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_435(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  rel(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_divmod_198(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  divmod(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_266(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  extensional(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_268(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  extensional(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_270(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  extensional(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_272(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  extensional(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_113(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntPropLevel X3 = gecode_IntPropLevel_from_term(YAP_ARG3);
  circuit(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_114(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  circuit(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_220(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  IntSet X4 = gecode_IntSet_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_222(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_233(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_235(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_237(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_238(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_240(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  IntSet X4 = gecode_IntSet_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_241(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_200(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_228(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_229(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatNum X3 = gecode_FloatNum_from_term(YAP_ARG3);
  FloatNum X4 = gecode_FloatNum_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_201(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatNum X3 = gecode_FloatNum_from_term(YAP_ARG3);
  FloatNum X4 = gecode_FloatNum_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_204(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVal X3 = gecode_FloatVal_from_term(YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_209(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_210(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_213(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_214(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_216(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_207(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  dom(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_convex_2(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  convex(*space,X2);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_190(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  distinct(*space,X2);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_329(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  member(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_member_333(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  member(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_257(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_255(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_263(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_261(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_249(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_247(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_245(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  element(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmin_13(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  argmin(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_267(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_269(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_271(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  DFA X3 = gecode_DFA_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_extensional_273(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TupleSet X3 = gecode_TupleSet_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  extensional(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_unshare_472(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  unshare(*space,X2);
  return TRUE;
}

static YAP_Bool gecode_constraint_unshare_474(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  unshare(*space,X2);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_98(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  channel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_101(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  channel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_94(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  channel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_167(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_168(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_163(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_164(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_161(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_155(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_156(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_151(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_152(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  BoolVarArgs X7 = gecode_BoolVarArgs_from_term(space,YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_149(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  cumulative(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_26(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  SetVarValPrint X4 = gecode_SetVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_34(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  IntBranchFilter X4 = gecode_IntBranchFilter_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_37(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  SetBranchFilter X4 = gecode_SetBranchFilter_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_20(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  BoolVarValPrint X4 = gecode_BoolVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_28(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  BoolBranchFilter X4 = gecode_BoolBranchFilter_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_31(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  FloatBranchFilter X4 = gecode_FloatBranchFilter_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_22(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  FloatVarValPrint X4 = gecode_FloatVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_24(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  IntVarValPrint X4 = gecode_IntVarValPrint_from_term(YAP_ARG4);
  assign(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_min_339(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  min(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_min_334(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  min(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_min_335(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  min(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_max_325(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  max(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_max_320(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  max(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_max_321(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  max(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmax_12(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  bool X5 = gecode_bool_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  argmax(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_47(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetValBranch X3 = gecode_SetValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_45(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntValBranch X3 = gecode_IntValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_43(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatValBranch X3 = gecode_FloatValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_41(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolValBranch X3 = gecode_BoolValBranch_from_term(YAP_ARG3);
  branch(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmin_16(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  argmin(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmin_14(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  argmin(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_abs_6(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  abs(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_373(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  path(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_374(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  path(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_350(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  IntPropLevel X8 = gecode_IntPropLevel_from_term(YAP_ARG8);
  nooverlap(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_351(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  BoolVarArgs X8 = gecode_BoolVarArgs_from_term(space,YAP_ARG8);
  nooverlap(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_303(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_299(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_311(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_307(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  linear(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_226(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetVar X3 = gecode_SetVar_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_232(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_234(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_236(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_243(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarArgs X3 = gecode_SetVarArgs_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_199(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_227(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_231(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_230(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVal X3 = gecode_FloatVal_from_term(YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_205(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_203(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVal X3 = gecode_FloatVal_from_term(YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_208(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_212(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_206(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  dom(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_sqr_454(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  sqr(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_sqr_455(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  sqr(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_349(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  nooverlap(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_348(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  nooverlap(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_pow_378(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  pow(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_sqrt_459(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  sqrt(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_134(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSetArgs X3 = gecode_IntSetArgs_from_term(YAP_ARG3);
  count(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_138(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  count(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_div_194(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  div(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_div_195(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  div(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_414(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_418(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_416(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_444(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_440(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_442(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_438(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_389(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_387(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolOpType X3 = gecode_BoolOpType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_396(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_397(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_392(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_393(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_428(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_424(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_426(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_420(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_432(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_434(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_386(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_384(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_402(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_400(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_408(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_409(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_404(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_405(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_412(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  rel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_precede_382(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  precede(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nroot_353(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  nroot(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_nroot_354(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  nroot(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_225(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  Reify X6 = gecode_Reify_from_term(YAP_ARG6);
  dom(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_219(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  dom(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_132(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  count(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_135(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSetArgs X3 = gecode_IntSetArgs_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  count(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_136(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSetArgs X3 = gecode_IntSetArgs_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  count(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_139(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  count(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_140(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  count(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_48(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetValBranch X3 = gecode_SetValBranch_from_term(YAP_ARG3);
  SetVarValPrint X4 = gecode_SetVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_73(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TieBreak<IntVarBranch> X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_67(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_79(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_85(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  TieBreak<SetVarBranch> X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_42(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolValBranch X3 = gecode_BoolValBranch_from_term(YAP_ARG3);
  BoolVarValPrint X4 = gecode_BoolVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_49(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_55(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TieBreak<BoolVarBranch> X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_64(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  TieBreak<FloatVarBranch> X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_61(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_44(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatValBranch X3 = gecode_FloatValBranch_from_term(YAP_ARG3);
  FloatVarValPrint X4 = gecode_FloatVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_46(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntValBranch X3 = gecode_IntValBranch_from_term(YAP_ARG3);
  IntVarValPrint X4 = gecode_IntVarValPrint_from_term(YAP_ARG4);
  branch(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_convex_3(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetVar X3 = gecode_SetVar_from_term(space,YAP_ARG3);
  convex(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_binpacking_40(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  binpacking(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmax_7(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  argmax(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_358(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  nvalues(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_356(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  nvalues(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_362(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  nvalues(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_nvalues_360(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  nvalues(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_sorted_453(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  sorted(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_184(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_182(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_180(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_178(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_176(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_174(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_172(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_170(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8);
  return TRUE;
}

static YAP_Bool gecode_constraint_when_479(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  std::function<void(Space&home)> X3 = gecode_std_function_from_term(YAP_ARG3);
  std::function<void(Space&home)> X4 = gecode_std_function_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  when(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_29(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  BoolBranchFilter X4 = gecode_BoolBranchFilter_from_term(YAP_ARG4);
  BoolVarValPrint X5 = gecode_BoolVarValPrint_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_35(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  IntBranchFilter X4 = gecode_IntBranchFilter_from_term(YAP_ARG4);
  IntVarValPrint X5 = gecode_IntVarValPrint_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_32(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  FloatBranchFilter X4 = gecode_FloatBranchFilter_from_term(YAP_ARG4);
  FloatVarValPrint X5 = gecode_FloatVarValPrint_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_38(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  SetBranchFilter X4 = gecode_SetBranchFilter_from_term(YAP_ARG4);
  SetVarValPrint X5 = gecode_SetVarValPrint_from_term(YAP_ARG5);
  assign(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_187(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  distinct(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_193(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  distinct(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_189(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  distinct(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmax_10(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  argmax(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_argmax_8(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  bool X4 = gecode_bool_from_term(YAP_ARG4);
  argmax(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_469(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  TaskTypeArgs X2 = gecode_TaskTypeArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  unary(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_470(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  TaskTypeArgs X2 = gecode_TaskTypeArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  BoolVarArgs X5 = gecode_BoolVarArgs_from_term(space,YAP_ARG5);
  unary(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_465(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  unary(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_466(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  BoolVarArgs X5 = gecode_BoolVarArgs_from_term(space,YAP_ARG5);
  unary(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_463(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  unary(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_366(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  path(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_365(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  path(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_368(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  IntVar X7 = gecode_IntVar_from_term(space,YAP_ARG7);
  path(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_185(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_183(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_181(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_179(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_177(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_175(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_173(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVarArgs X6 = gecode_IntVarArgs_from_term(space,YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulatives_171(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  IntArgs X7 = gecode_IntArgs_from_term(YAP_ARG7);
  bool X8 = gecode_bool_from_term(YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  cumulatives(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_413(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_417(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_415(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_430(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_429(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_429_fix(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetOpType X2 = gecode_SetOpType_from_term(YAP_ARG2);
  SetVarArgs X3 = gecode_SetVarArgs_from_term(space,YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_427_fix(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetOpType X2 = gecode_SetOpType_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_443(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_436(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_439(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_441(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_437(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_395(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_391(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_427(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_422(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_425(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_423(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_419(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_431(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_433(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_385(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_383(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_401(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_399(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_407(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_403(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_rel_411(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  rel(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_cardinality_68(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  cardinality(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_cardinality_91(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  cardinality(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_cardinality_92(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  cardinality(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_mult_344(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  mult(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_112(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  circuit(*space,X2);
  return TRUE;
}

static YAP_Bool gecode_constraint_min_338(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  min(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_min_337(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  min(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_221(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  IntSet X4 = gecode_IntSet_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_223(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_224(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_239(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_242(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetRelType X3 = gecode_SetRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_202(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatNum X3 = gecode_FloatNum_from_term(YAP_ARG3);
  FloatNum X4 = gecode_FloatNum_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_211(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_215(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  Reify X4 = gecode_Reify_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_217(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_dom_218(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  dom(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_186(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  distinct(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_191(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntPropLevel X3 = gecode_IntPropLevel_from_term(YAP_ARG3);
  distinct(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_192(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  distinct(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_distinct_188(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  distinct(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_345(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  nooverlap(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_mod_340(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  mod(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_sorted_451(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  sorted(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_sorted_452(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  sorted(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_sorted_450(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  sorted(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_256(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_254(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_262(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_260(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_248(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_246(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_element_244(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  element(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_284(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_280(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_316(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_312(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_294(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_292(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  linear(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_111(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  circuit(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_unshare_473(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntPropLevel X3 = gecode_IntPropLevel_from_term(YAP_ARG3);
  unshare(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_unshare_475(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntPropLevel X3 = gecode_IntPropLevel_from_term(YAP_ARG3);
  unshare(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_166(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_162(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_159(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_160(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_154(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  TaskTypeArgs X3 = gecode_TaskTypeArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_150(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVarArgs X5 = gecode_IntVarArgs_from_term(space,YAP_ARG5);
  IntArgs X6 = gecode_IntArgs_from_term(YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_147(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_cumulative_148(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  cumulative(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_51(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  BoolVarValPrint X6 = gecode_BoolVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_53(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  BoolBranchFilter X6 = gecode_BoolBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_57(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TieBreak<BoolVarBranch> X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  BoolVarValPrint X6 = gecode_BoolVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_59(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TieBreak<BoolVarBranch> X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  BoolBranchFilter X6 = gecode_BoolBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_75(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TieBreak<IntVarBranch> X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  IntVarValPrint X6 = gecode_IntVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_77(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TieBreak<IntVarBranch> X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  IntBranchFilter X6 = gecode_IntBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_69(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  IntVarValPrint X6 = gecode_IntVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_71(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  IntBranchFilter X6 = gecode_IntBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_66(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  TieBreak<FloatVarBranch> X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  FloatVarValPrint X6 = gecode_FloatVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_63(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  FloatVarValPrint X6 = gecode_FloatVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_83(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  SetBranchFilter X6 = gecode_SetBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_81(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  SetVarValPrint X6 = gecode_SetVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_89(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  TieBreak<SetVarBranch> X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  SetBranchFilter X6 = gecode_SetBranchFilter_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_87(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  TieBreak<SetVarBranch> X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  SetVarValPrint X6 = gecode_SetVarValPrint_from_term(YAP_ARG6);
  branch(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_145(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_143(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_131(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_129(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_127(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_125(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_123(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_count_121(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  count(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_sequence_447(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  sequence(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_sequence_449(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  IntPropLevel X7 = gecode_IntPropLevel_from_term(YAP_ARG7);
  sequence(*space,X2,X3,X4,X5,X6,X7);
  return TRUE;
}

static YAP_Bool gecode_constraint_sqrt_457(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  sqrt(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_sqrt_458(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  sqrt(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_max_322(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  max(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_abs_4(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  abs(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_abs_5(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  abs(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_relax_445(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarArgs X3 = gecode_SetVarArgs_from_term(space,YAP_ARG3);
  Rnd X4 = gecode_Rnd_from_term(YAP_ARG4);
  double X5 = gecode_double_from_term(YAP_ARG5);
  relax(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_372(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  path(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_118(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  clause(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_clause_116(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolOpType X2 = gecode_BoolOpType_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  BoolVarArgs X4 = gecode_BoolVarArgs_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  clause(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_sequence_446(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  sequence(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_sequence_448(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntSet X3 = gecode_IntSet_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  int X6 = gecode_int_from_term(YAP_ARG6);
  sequence(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_346(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  IntPropLevel X6 = gecode_IntPropLevel_from_term(YAP_ARG6);
  nooverlap(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_nooverlap_347(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntArgs X5 = gecode_IntArgs_from_term(YAP_ARG5);
  BoolVarArgs X6 = gecode_BoolVarArgs_from_term(space,YAP_ARG6);
  nooverlap(*space,X2,X3,X4,X5,X6);
  return TRUE;
}

static YAP_Bool gecode_constraint_unary_460(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntArgs X3 = gecode_IntArgs_from_term(YAP_ARG3);
  unary(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_path_371(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  IntVar X6 = gecode_IntVar_from_term(space,YAP_ARG6);
  IntVarArgs X7 = gecode_IntVarArgs_from_term(space,YAP_ARG7);
  IntVar X8 = gecode_IntVar_from_term(space,YAP_ARG8);
  IntPropLevel X9 = gecode_IntPropLevel_from_term(YAP_ARG9);
  path(*space,X2,X3,X4,X5,X6,X7,X8,X9);
  return TRUE;
}

static YAP_Bool gecode_constraint_div_196(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  div(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_nroot_355(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  nroot(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_285(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_286(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_281(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_282(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_317(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_318(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_313(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_314(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntRelType X3 = gecode_IntRelType_from_term(YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_295(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_293(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatRelType X3 = gecode_FloatRelType_from_term(YAP_ARG3);
  FloatVal X4 = gecode_FloatVal_from_term(YAP_ARG4);
  Reify X5 = gecode_Reify_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_290(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVar X5 = gecode_FloatVar_from_term(space,YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_288(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatValArgs X2 = gecode_FloatValArgs_from_term(YAP_ARG2);
  FloatVarArgs X3 = gecode_FloatVarArgs_from_term(space,YAP_ARG3);
  FloatRelType X4 = gecode_FloatRelType_from_term(YAP_ARG4);
  FloatVal X5 = gecode_FloatVal_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_300(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_296(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  BoolVarArgs X3 = gecode_BoolVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_308(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_linear_304(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntRelType X4 = gecode_IntRelType_from_term(YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  linear(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_279(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  SetVar X3 = gecode_SetVar_from_term(space,YAP_ARG3);
  SetVar X4 = gecode_SetVar_from_term(space,YAP_ARG4);
  SetVar X5 = gecode_SetVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_277(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  IntVar X5 = gecode_IntVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_276(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  FloatVar X3 = gecode_FloatVar_from_term(space,YAP_ARG3);
  FloatVar X4 = gecode_FloatVar_from_term(space,YAP_ARG4);
  FloatVar X5 = gecode_FloatVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_ite_274(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolVar X3 = gecode_BoolVar_from_term(space,YAP_ARG3);
  BoolVar X4 = gecode_BoolVar_from_term(space,YAP_ARG4);
  BoolVar X5 = gecode_BoolVar_from_term(space,YAP_ARG5);
  ite(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_50(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_52(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolVarBranch X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_56(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TieBreak<BoolVarBranch> X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  BoolBranchFilter X5 = gecode_BoolBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_58(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  TieBreak<BoolVarBranch> X3 = gecode_BoolVarBranch_from_term(YAP_ARG3);
  BoolValBranch X4 = gecode_BoolValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_74(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TieBreak<IntVarBranch> X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_76(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  TieBreak<IntVarBranch> X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_68(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  IntBranchFilter X5 = gecode_IntBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_70(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarBranch X3 = gecode_IntVarBranch_from_term(YAP_ARG3);
  IntValBranch X4 = gecode_IntValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_65(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  TieBreak<FloatVarBranch> X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_62(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatVarBranch X3 = gecode_FloatVarBranch_from_term(YAP_ARG3);
  FloatValBranch X4 = gecode_FloatValBranch_from_term(YAP_ARG4);
  FloatBranchFilter X5 = gecode_FloatBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_82(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_80(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetVarBranch X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_88(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  TieBreak<SetVarBranch> X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  Symmetries X5 = gecode_Symmetries_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_branch_86(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  TieBreak<SetVarBranch> X3 = gecode_SetVarBranch_from_term(YAP_ARG3);
  SetValBranch X4 = gecode_SetValBranch_from_term(YAP_ARG4);
  SetBranchFilter X5 = gecode_SetBranchFilter_from_term(YAP_ARG5);
  branch(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_binpacking_39(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntArgs X4 = gecode_IntArgs_from_term(YAP_ARG4);
  binpacking(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_115(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  int X2 = gecode_int_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  circuit(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_circuit_104(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntArgs X2 = gecode_IntArgs_from_term(YAP_ARG2);
  IntVarArgs X3 = gecode_IntVarArgs_from_term(space,YAP_ARG3);
  IntVar X4 = gecode_IntVar_from_term(space,YAP_ARG4);
  circuit(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_when_476(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  std::function<void(Space&home)> X3 = gecode_std_function_from_term(YAP_ARG3);
  when(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_99(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  IntVar X3 = gecode_IntVar_from_term(space,YAP_ARG3);
  int X4 = gecode_int_from_term(YAP_ARG4);
  IntPropLevel X5 = gecode_IntPropLevel_from_term(YAP_ARG5);
  channel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_channel_102(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  int X3 = gecode_int_from_term(YAP_ARG3);
  IntVarArgs X4 = gecode_IntVarArgs_from_term(space,YAP_ARG4);
  int X5 = gecode_int_from_term(YAP_ARG5);
  channel(*space,X2,X3,X4,X5);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_25(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVar X2 = gecode_SetVar_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_33(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVarArgs X2 = gecode_IntVarArgs_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_36(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  SetVarArgs X2 = gecode_SetVarArgs_from_term(space,YAP_ARG2);
  SetAssign X3 = gecode_SetAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_19(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_27(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVarArgs X2 = gecode_BoolVarArgs_from_term(space,YAP_ARG2);
  BoolAssign X3 = gecode_BoolAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_30(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVarArgs X2 = gecode_FloatVarArgs_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_21(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  FloatVar X2 = gecode_FloatVar_from_term(space,YAP_ARG2);
  FloatAssign X3 = gecode_FloatAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_assign_23(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  IntVar X2 = gecode_IntVar_from_term(space,YAP_ARG2);
  IntAssign X3 = gecode_IntAssign_from_term(YAP_ARG3);
  assign(*space,X2,X3);
  return TRUE;
}

static YAP_Bool gecode_constraint_when_477(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  std::function<void(Space&home)> X3 = gecode_std_function_from_term(YAP_ARG3);
  IntPropLevel X4 = gecode_IntPropLevel_from_term(YAP_ARG4);
  when(*space,X2,X3,X4);
  return TRUE;
}

static YAP_Bool gecode_constraint_when_478(void)
{
  GenericSpace* space = gecode_Space_from_term(YAP_ARG1);
  BoolVar X2 = gecode_BoolVar_from_term(space,YAP_ARG2);
  std::function<void(Space&home)> X3 = gecode_std_function_from_term(YAP_ARG3);
  std::function<void(Space&home)> X4 = gecode_std_function_from_term(YAP_ARG4);
  when(*space,X2,X3,X4);
  return TRUE;
}

